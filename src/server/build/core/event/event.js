"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.activeWaitingRoomListeningEvents = exports.serverResponsiveListenerEvents = exports.clientAsyncEvents = exports.serverActiveListenerEvents = exports.clientActiveListenerEvents = exports.isCardResponsiveIdentifier = void 0;
const isCardResponsiveIdentifier = (identifier) => [
    158 /* AskForPeachEvent */,
    159 /* AskForCardResponseEvent */,
    160 /* AskForCardUseEvent */,
].includes(identifier);
exports.isCardResponsiveIdentifier = isCardResponsiveIdentifier;
const clientActiveListenerEvents = () => [
    111 /* SetFlagEvent */,
    112 /* RemoveFlagEvent */,
    113 /* ClearFlagEvent */,
    114 /* AddMarkEvent */,
    115 /* SetMarkEvent */,
    116 /* RemoveMarkEvent */,
    117 /* ClearMarkEvent */,
    108 /* SetOutsideCharactersEvent */,
    109 /* HuaShenCardUpdatedEvent */,
    110 /* UpgradeSideEffectSkillsEvent */,
    100 /* UserMessageEvent */,
    104 /* PhaseChangeEvent */,
    105 /* PhaseStageChangeEvent */,
    106 /* SyncGameCommonRulesEvent */,
    103 /* CustomGameDialog */,
    102 /* NotifyEvent */,
    101 /* PlayerStatusEvent */,
    107 /* PlayerPropertiesChangeEvent */,
    118 /* DrunkEvent */,
    119 /* ChainLockedEvent */,
    123 /* CardResponseEvent */,
    124 /* CardUseEvent */,
    125 /* CardEffectEvent */,
    126 /* CardDisplayEvent */,
    127 /* DrawCardEvent */,
    128 /* MoveCardEvent */,
    129 /* ObserveCardsEvent */,
    120 /* LoseSkillEvent */,
    121 /* ObtainSkillEvent */,
    131 /* AimEvent */,
    132 /* SkillUseEvent */,
    133 /* SkillEffectEvent */,
    134 /* PinDianEvent */,
    135 /* LoseHpEvent */,
    136 /* ChangeMaxHpEvent */,
    137 /* DamageEvent */,
    138 /* RecoverEvent */,
    139 /* HpChangeEvent */,
    140 /* JudgeEvent */,
    142 /* GameStartEvent */,
    141 /* GameReadyEvent */,
    143 /* GameBeginEvent */,
    144 /* CircleStartEvent */,
    146 /* GameOverEvent */,
    152 /* PlayerDyingEvent */,
    153 /* PlayerDiedEvent */,
    150 /* PlayerEnterEvent */,
    148 /* PlayerReenterEvent */,
    149 /* PlayerBulkPacketEvent */,
    151 /* PlayerLeaveEvent */,
    180 /* ObserverEnterEvent */,
    155 /* PlayerChainedEvent */,
    156 /* PlayerTurnOverEvent */,
    157 /* AskForPlayCardsOrSkillsEvent */,
    158 /* AskForPeachEvent */,
    159 /* AskForCardResponseEvent */,
    160 /* AskForCardUseEvent */,
    161 /* AskForCardDisplayEvent */,
    162 /* AskForCardDropEvent */,
    163 /* AskForCardEvent */,
    164 /* AskForPinDianCardEvent */,
    165 /* AskForChoosingCardEvent */,
    166 /* AskForChoosingCardWithConditionsEvent */,
    167 /* AskForChoosingPlayerEvent */,
    174 /* AskForChoosingCardAvailableTargetEvent */,
    168 /* AskForChoosingOptionsEvent */,
    170 /* AskForChoosingCardFromPlayerEvent */,
    171 /* AskForSkillUseEvent */,
    169 /* AskForChoosingCharacterEvent */,
    172 /* AskForPlaceCardsInDileEvent */,
    173 /* AskForContinuouslyChoosingCardEvent */,
    184 /* AskForFortuneCardExchangeEvent */,
    130 /* ObserveCardFinishEvent */,
    175 /* AbortOrResumePlayerSectionsEvent */,
    176 /* AbortOrResumePlayerJudgeAreaEvent */,
    177 /* RefreshOnceSkillEvent */,
    182 /* BackToWaitingRoomEvent */,
    185 /* SetCardTagEvent */,
    186 /* RemoveCardTagEvent */,
    187 /* ClearCardTagsEvent */,
    188 /* ArmorChangeEvent */,
];
exports.clientActiveListenerEvents = clientActiveListenerEvents;
exports.serverActiveListenerEvents = [
    100 /* UserMessageEvent */,
    150 /* PlayerEnterEvent */,
    151 /* PlayerLeaveEvent */,
    101 /* PlayerStatusEvent */,
    148 /* PlayerReenterEvent */,
    182 /* BackToWaitingRoomEvent */,
    183 /* PlayerReadyEvent */,
    181 /* ObserverRequestChangeEvent */,
];
exports.clientAsyncEvents = [...exports.serverActiveListenerEvents, 102 /* NotifyEvent */];
exports.serverResponsiveListenerEvents = [
    157 /* AskForPlayCardsOrSkillsEvent */,
    158 /* AskForPeachEvent */,
    159 /* AskForCardResponseEvent */,
    160 /* AskForCardUseEvent */,
    161 /* AskForCardDisplayEvent */,
    162 /* AskForCardDropEvent */,
    163 /* AskForCardEvent */,
    164 /* AskForPinDianCardEvent */,
    165 /* AskForChoosingCardEvent */,
    166 /* AskForChoosingCardWithConditionsEvent */,
    167 /* AskForChoosingPlayerEvent */,
    174 /* AskForChoosingCardAvailableTargetEvent */,
    168 /* AskForChoosingOptionsEvent */,
    169 /* AskForChoosingCharacterEvent */,
    170 /* AskForChoosingCardFromPlayerEvent */,
    171 /* AskForSkillUseEvent */,
    172 /* AskForPlaceCardsInDileEvent */,
    173 /* AskForContinuouslyChoosingCardEvent */,
    184 /* AskForFortuneCardExchangeEvent */,
];
exports.activeWaitingRoomListeningEvents = [
    "SeatDisabled" /* SeatDisabled */,
    "RoomCreated" /* RoomCreated */,
    "GameInfoUpdate" /* GameInfoUpdate */,
    "PlayerEnter" /* PlayerEnter */,
    "PlayerLeave" /* PlayerLeave */,
    "PlayerReady" /* PlayerReady */,
    "GameStart" /* GameStart */,
    "PlayerChatMessage" /* PlayerChatMessage */,
    "ChangeHost" /* ChangeHost */,
];
